import pandas as pd
import streamlit as st

# === Load & Clean Excel Data ===
EXCEL_FILE = "product_database.xlsx"
xls = pd.ExcelFile(EXCEL_FILE)

# Filter only PROFILE sheets
sheet_names = [name for name in xls.sheet_names if name.upper().startswith("PROFILE")]
sheets_dict = {name: xls.parse(name) for name in sheet_names}

for name, df in sheets_dict.items():
    df["Width(mm)"] = pd.to_numeric(df["Width(mm)"], errors="coerce")
    df["Length(mm)"] = pd.to_numeric(df["Length(mm)"], errors="coerce")
    df["Type"] = df["Type"].astype(str).str.strip().str.upper()
    df["Price(RM)"] = df["Price(RM)"].astype(str).str.replace("/M", "").str.replace(" ", "").str.strip()
    df["Total"] = df["Total"].astype(str).str.strip()
    sheets_dict[name] = df

# === Streamlit App UI ===
st.title("Multi-Product Price Calculator")

# Sheet selection
sheet_name = st.selectbox("Select Product Sheet", sheet_names)
df = sheets_dict[sheet_name]

# Dropdown options based on selected sheet
width_options = sorted(df["Width(mm)"].dropna().unique().tolist())
length_options = sorted(df["Length(mm)"].dropna().unique().tolist())
type_options = sorted(df["Type"].dropna().unique().tolist())

width = st.selectbox("Width (mm)", width_options)
length = st.selectbox("Length (mm)", length_options)
type_ = st.selectbox("Type", type_options)

# User Inputs
height = st.number_input("Total (mm)", min_value=0.0, step=1.0)
quantity = st.number_input("Quantity (pieces)", min_value=1, step=1)
holes = st.number_input("Holes [thread] (If none, put 0)", min_value=0, step=1)

if st.button("Calculate Price"):
    try:
        total_products = (height * quantity) / 1000
        filtered = df[
            (df["Width(mm)"] == width) &
            (df["Length(mm)"] == length) &
            (df["Type"] == type_)
        ]

        if filtered.empty:
            st.warning("No matching profile found.")
        else:
            part_no = filtered.iloc[0]["PART NO"]
            desc = filtered.iloc[0].get("DESCRIPTION", "â€”")

            st.write(f"**Part No:** {part_no}")
            st.write(f"**Description:** {desc}")
            st.write(f"**Width:** {width} mm | **Length:** {length} mm | **Type:** {type_}")

            matched_price = None
            for _, row in filtered.iterrows():
                bracket_text = str(row["Total"]).strip()
                try:
                    price = float(row["Price(RM)"])
                except ValueError:
                    continue

                try:
                    val = float(bracket_text.strip("<>M= "))
                    if bracket_text.startswith("<") and total_products < val:
                        matched_price = price
                        break
                    elif bracket_text.startswith(">") and total_products > val:
                        matched_price = price
                    elif bracket_text.startswith("=") and total_products == val:
                        matched_price = price
                        break
                except:
                    continue

            if not matched_price:
                st.error("No price bracket matched the total products.")
            else:
                cuts = quantity * 2
                material_cost = matched_price * total_products
                cut_cost = cuts * 3
                hole_cost = holes * 8
                grand_total = material_cost + cut_cost + hole_cost

                st.success(f"### Grand Total: RM {grand_total:.2f}")
    except Exception as e:
        st.error(f"Error: {e}")
